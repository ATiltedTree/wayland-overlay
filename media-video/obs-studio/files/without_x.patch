diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7edf307f7..128b5e1b8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -207,6 +207,12 @@ if(APPLE)
 elseif(UNIX)
 	option(USE_XDG "Utilize XDG Base Directory Specification" ON)
 	option(ENABLE_WAYLAND "Build support for Wayland" ON)
+	option(ENABLE_X11 "Build support for X11" ON)
+
+    if(NOT ENABLE_WAYLAND AND NOT ENABLE_X11)
+        message(ERROR "Need wayland or X11")
+    endif()
+
 	if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
 		option(ENABLE_DARRAY_TYPE_TEST "Test types of darray argument" ON)
 	else()
diff --git a/UI/frontend-plugins/decklink-captions/CMakeLists.txt b/UI/frontend-plugins/decklink-captions/CMakeLists.txt
index e3879f75b..7b91d4912 100644
--- a/UI/frontend-plugins/decklink-captions/CMakeLists.txt
+++ b/UI/frontend-plugins/decklink-captions/CMakeLists.txt
@@ -5,11 +5,11 @@ if(APPLE)
     include_directories(${COCOA})
 endif()
 
-if(UNIX AND NOT APPLE)
-    find_package(X11 REQUIRED)
-    link_libraries(${X11_LIBRARIES})
-    include_directories(${X11_INCLUDE_DIR})
-endif()
+# if(UNIX AND NOT APPLE)
+#     find_package(X11 REQUIRED)
+#     link_libraries(${X11_LIBRARIES})
+#     include_directories(${X11_INCLUDE_DIR})
+# endif()
 
 set(decklink-captions_HEADERS
         decklink-captions.h
diff --git a/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt b/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt
index 8b1cd1cda..d4365e8c3 100644
--- a/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt
+++ b/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt
@@ -5,11 +5,11 @@ if(APPLE)
 	include_directories(${COCOA})
 endif()
 
-if(UNIX AND NOT APPLE)
-	find_package(X11 REQUIRED)
-	link_libraries(${X11_LIBRARIES})
-	include_directories(${X11_INCLUDE_DIR})
-endif()
+# if(UNIX AND NOT APPLE)
+# 	find_package(X11 REQUIRED)
+# 	link_libraries(${X11_LIBRARIES})
+# 	include_directories(${X11_INCLUDE_DIR})
+# endif()
 
 set(decklink-ouput-ui_HEADERS
 	${decklink-ouput-ui_HEADERS}
diff --git a/UI/frontend-plugins/frontend-tools/CMakeLists.txt b/UI/frontend-plugins/frontend-tools/CMakeLists.txt
index 40e5404d1..d9d884ed8 100644
--- a/UI/frontend-plugins/frontend-tools/CMakeLists.txt
+++ b/UI/frontend-plugins/frontend-tools/CMakeLists.txt
@@ -5,7 +5,7 @@ if(APPLE)
 	include_directories(${COCOA})
 endif()
 
-if(UNIX AND NOT APPLE)
+if(UNIX AND NOT APPLE AND ENABLE_X11)
 	find_package(X11 REQUIRED)
 	link_libraries(${X11_LIBRARIES})
 	include_directories(${X11_INCLUDE_DIR})
diff --git a/UI/frontend-plugins/frontend-tools/auto-scene-switcher-nix.cpp b/UI/frontend-plugins/frontend-tools/auto-scene-switcher-nix.cpp
index 2aa0120a6..e25095b61 100644
--- a/UI/frontend-plugins/frontend-tools/auto-scene-switcher-nix.cpp
+++ b/UI/frontend-plugins/frontend-tools/auto-scene-switcher-nix.cpp
@@ -1,3 +1,4 @@
+#ifdef ENABLE_X11
 #include <X11/Xlib.h>
 #include <X11/Xatom.h>
 #include <X11/Xutil.h>
@@ -12,11 +13,13 @@
 #undef None
 #undef Status
 #undef Unsorted
+#endif
 #include <util/platform.h>
 #include "auto-scene-switcher.hpp"
 
 using namespace std;
 
+#ifdef ENABLE_X11
 static Display *xdisplay = 0;
 
 Display *disp()
@@ -26,18 +29,22 @@ Display *disp()
 
 	return xdisplay;
 }
+#endif
 
 void CleanupSceneSwitcher()
 {
+#ifdef ENABLE_X11
 	if (!xdisplay)
 		return;
 
 	XCloseDisplay(xdisplay);
 	xdisplay = 0;
+#endif
 }
 
 static bool ewmhIsSupported()
 {
+#ifdef ENABLE_X11
 	Display *display = disp();
 	Atom netSupportingWmCheck =
 		XInternAtom(display, "_NET_SUPPORTING_WM_CHECK", true);
@@ -77,8 +84,12 @@ static bool ewmhIsSupported()
 	}
 
 	return ewmh_window != 0;
+#else
+	return false;
+#endif
 }
 
+#ifdef ENABLE_X11
 static std::vector<Window> getTopLevelWindows()
 {
 	std::vector<Window> res;
@@ -115,11 +126,14 @@ static std::vector<Window> getTopLevelWindows()
 
 	return res;
 }
+#endif
 
 static std::string GetWindowTitle(size_t i)
 {
-	Window w = getTopLevelWindows().at(i);
 	std::string windowTitle;
+
+#ifdef ENABLE_X11
+	Window w = getTopLevelWindows().at(i);
 	char *name;
 
 	int status = XFetchName(disp(), w, &name);
@@ -136,6 +150,7 @@ static std::string GetWindowTitle(size_t i)
 			XFree(xtp_new_name.value);
 		}
 	}
+#endif
 
 	return windowTitle;
 }
@@ -143,11 +158,13 @@ static std::string GetWindowTitle(size_t i)
 void GetWindowList(vector<string> &windows)
 {
 	windows.resize(0);
+#ifdef ENABLE_X11
 
 	for (size_t i = 0; i < getTopLevelWindows().size(); ++i) {
 		if (GetWindowTitle(i) != "")
 			windows.emplace_back(GetWindowTitle(i));
 	}
+#endif
 }
 
 void GetCurrentWindowTitle(string &title)
@@ -156,6 +173,7 @@ void GetCurrentWindowTitle(string &title)
 		return;
 	}
 
+#ifdef ENABLE_X11
 	Atom active = XInternAtom(disp(), "_NET_ACTIVE_WINDOW", true);
 	Atom actualType;
 	int format;
@@ -185,4 +203,5 @@ void GetCurrentWindowTitle(string &title)
 	}
 
 	XFree(name);
+#endif
 }
diff --git a/UI/obs-app.cpp b/UI/obs-app.cpp
index 797c9528c..4a2d9dde5 100644
--- a/UI/obs-app.cpp
+++ b/UI/obs-app.cpp
@@ -1411,11 +1411,13 @@ bool OBSApp::OBSInit()
 	qRegisterMetaType<VoidFunc>();
 
 #if !defined(_WIN32) && !defined(__APPLE__)
+#ifdef ENABLE_X11
 	obs_set_nix_platform(OBS_NIX_PLATFORM_X11_GLX);
 	if (QApplication::platformName() == "xcb" && getenv("OBS_USE_EGL")) {
 		obs_set_nix_platform(OBS_NIX_PLATFORM_X11_EGL);
 		blog(LOG_INFO, "Using EGL/X11");
 	}
+#endif
 
 #ifdef ENABLE_WAYLAND
 	if (QApplication::platformName().contains("wayland")) {
diff --git a/UI/platform-x11.cpp b/UI/platform-x11.cpp
index b41f1c3c9..e340254fe 100644
--- a/UI/platform-x11.cpp
+++ b/UI/platform-x11.cpp
@@ -69,8 +69,8 @@ void RunningInstanceCheck(bool &already_running)
 		 "%s %d %s", "/com/obsproject", getpid(),
 		 App()->GetVersionString().c_str());
 
-	int bindErr = bind(uniq, (struct sockaddr *)&bindInfo,
-			   sizeof(struct sockaddr_un));
+	int bindErr = ::bind(uniq, (struct sockaddr *)&bindInfo,
+			     sizeof(struct sockaddr_un));
 	already_running = bindErr == 0 ? 0 : 1;
 
 	if (already_running) {
diff --git a/UI/qt-wrappers.cpp b/UI/qt-wrappers.cpp
index 545272739..49153cc40 100644
--- a/UI/qt-wrappers.cpp
+++ b/UI/qt-wrappers.cpp
@@ -122,11 +122,13 @@ bool QTToGSWindow(QWindow *window, gs_window &gswindow)
 	gswindow.view = (id)window->winId();
 #else
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_GLX:
 	case OBS_NIX_PLATFORM_X11_EGL:
 		gswindow.id = window->winId();
 		gswindow.display = obs_get_nix_platform_display();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		QPlatformNativeInterface *native =
diff --git a/deps/glad/CMakeLists.txt b/deps/glad/CMakeLists.txt
index 83f4efac5..5bb02a66e 100644
--- a/deps/glad/CMakeLists.txt
+++ b/deps/glad/CMakeLists.txt
@@ -3,7 +3,9 @@ project(glad)
 find_package(OpenGL)
 
 if(NOT WIN32 AND NOT APPLE)
-	find_package(X11 REQUIRED)
+    if(ENABLE_X11)
+	    find_package(X11 REQUIRED)
+    endif()
 	find_package(EGL REQUIRED)
 endif()
 
@@ -19,21 +21,31 @@ if(WIN32)
 		include/glad/glad_wgl.h
 		obsglad.rc)
 elseif(NOT APPLE)
-	set(glad_PLATFORM_SOURCES
-		src/glad_egl.c
-		src/glad_glx.c
-		include/glad/glad_egl.h
-		include/glad/glad_glx.h)
+    if(ENABLE_X11)
+        set(glad_PLATFORM_SOURCES
+            src/glad_egl.c
+            src/glad_glx.c
+            include/glad/glad_egl.h
+            include/glad/glad_glx.h)
+    else()
+        set(glad_PLATFORM_SOURCES
+            src/glad_egl.c
+            include/glad/glad_egl.h)
+    endif()
 endif()
 
 set(glad_include_dirs
 	PRIVATE ${OPENGL_INCLUDE_DIR})
 
 if (UNIX AND NOT APPLE)
-list (APPEND glad_include_dirs
-	PRIVATE
-		${X11_X11_INCLUDE_PATH}
-		${EGL_INCLUDE_DIRS})
+    if(ENABLE_X11)
+        list(APPEND glad_include_dirs
+            PRIVATE
+                ${X11_X11_INCLUDE_PATH})
+    endif()
+    list(APPEND glad_include_dirs
+        PRIVATE
+            ${EGL_INCLUDE_DIRS})
 endif()
 
 add_library(glad SHARED
@@ -57,9 +69,14 @@ if(NOT MSVC)
 endif()
 
 if(NOT WIN32 AND NOT APPLE)
+    if(ENABLE_X11)
 	set(glad_PLATFORM_DEPS
 		${X11_X11_LIB}
 		${EGL_LIBRARIES})
+    else()
+	set(glad_PLATFORM_DEPS
+		${EGL_LIBRARIES})
+    endif()
 
 	# only link to libdl on linux
 	if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
@@ -70,7 +87,6 @@ if(NOT WIN32 AND NOT APPLE)
 endif()
 
 target_link_libraries(glad
-	${glad_PLATFORM_DEPS}
-	${OPENGL_gl_LIBRARY})
+	${glad_PLATFORM_DEPS})
 
 install_obs_core(glad)
diff --git a/deps/glad/src/glad.c b/deps/glad/src/glad.c
index 8fc9f8f53..bb8a71d54 100644
--- a/deps/glad/src/glad.c
+++ b/deps/glad/src/glad.c
@@ -33,11 +33,6 @@ void close_gl(void) {
 #include <dlfcn.h>
 static void* libGL;
 
-#ifndef __APPLE__
-typedef void* (APIENTRYP PFNGLXGETPROCADDRESSPROC_PRIVATE)(const char*);
-PFNGLXGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;
-#endif
-
 static
 int open_gl(void) {
 #ifdef __APPLE__
@@ -48,7 +43,7 @@ int open_gl(void) {
         "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"
     };
 #else
-    static const char *NAMES[] = {"libGL.so.1", "libGL.so"};
+    static const char *NAMES[] = {"libGLESv2.so.2", "libGLESv2.so"};
 #endif
 
     unsigned int index = 0;
@@ -56,13 +51,7 @@ int open_gl(void) {
         libGL = dlopen(NAMES[index], RTLD_NOW | RTLD_GLOBAL);
 
         if(libGL != NULL) {
-#ifdef __APPLE__
             return 1;
-#else
-            gladGetProcAddressPtr = (PFNGLXGETPROCADDRESSPROC_PRIVATE)dlsym(libGL,
-                "glXGetProcAddressARB");
-            return gladGetProcAddressPtr != NULL;
-#endif
         }
     }
 
@@ -83,11 +72,6 @@ void* get_proc(const char *namez) {
     void* result = NULL;
     if(libGL == NULL) return NULL;
 
-#ifndef __APPLE__
-    if(gladGetProcAddressPtr != NULL) {
-        result = gladGetProcAddressPtr(namez);
-    }
-#endif
     if(result == NULL) {
 #ifdef _WIN32
         result = (void*)GetProcAddress(libGL, namez);
diff --git a/libobs-opengl/CMakeLists.txt b/libobs-opengl/CMakeLists.txt
index 0865a059f..543290eef 100644
--- a/libobs-opengl/CMakeLists.txt
+++ b/libobs-opengl/CMakeLists.txt
@@ -1,8 +1,6 @@
 project(libobs-opengl)
 
 
-find_package(OpenGL REQUIRED)
-include_directories(${OPENGL_INCLUDE_DIR})
 
 add_definitions(-DLIBOBS_EXPORTS)
 
@@ -24,31 +22,38 @@ elseif(APPLE)
 	include_directories(${IOSURF})
 	mark_as_advanced(${IOSURF})
 
+    find_package(OpenGL REQUIRED)
+    include_directories(${OPENGL_INCLUDE_DIR})
+
 	set(libobs-opengl_PLATFORM_DEPS
 		${COCOA}
 		${IOSURF}
 		${OPENGL_gl_LIBRARY})
 else()
-	find_package(XCB COMPONENTS XCB REQUIRED)
-	find_package(X11_XCB REQUIRED)
-
-	include_directories(
-		${XCB_INCLUDE_DIRS}
-		${X11_XCB_INCLUDE_DIRS})
-
-	add_definitions(
-		${XCB_DEFINITIONS}
-		${X11_XCB_DEFINITIONS})
-
-	set(libobs-opengl_PLATFORM_DEPS
-		${XCB_LIBRARIES}
-		${X11_XCB_LIBRARIES})
-
-	set(libobs-opengl_PLATFORM_SOURCES
-		gl-egl-common.c
-		gl-nix.c
-		gl-x11-egl.c
-		gl-x11-glx.c)
+    set(libobs-opengl_PLATFORM_SOURCES
+        gl-egl-common.c
+        gl-nix.c)
+    if(ENABLE_X11)
+        find_package(XCB COMPONENTS XCB REQUIRED)
+        find_package(X11_XCB REQUIRED)
+
+        include_directories(
+            ${XCB_INCLUDE_DIRS}
+            ${X11_XCB_INCLUDE_DIRS})
+
+        add_definitions(
+            ${XCB_DEFINITIONS}
+            ${X11_XCB_DEFINITIONS})
+
+        set(libobs-opengl_PLATFORM_DEPS
+            ${XCB_LIBRARIES}
+            ${X11_XCB_LIBRARIES})
+
+        set(libobs-opengl_PLATFORM_SOURCES
+            ${libobs-opengl_PLATFORM_SOURCES}
+            gl-x11-egl.c
+            gl-x11-glx.c)
+    endif()
 
 	if(ENABLE_WAYLAND)
 		find_package(EGL REQUIRED)
@@ -120,8 +125,8 @@ set_target_properties(libobs-opengl
 endif()
 
 target_link_libraries(libobs-opengl
-	libobs
 	glad
+	libobs
 	${libobs-opengl_PLATFORM_DEPS})
 
 install_obs_core(libobs-opengl)
diff --git a/libobs-opengl/gl-nix.c b/libobs-opengl/gl-nix.c
index aa93150a9..2e20bf8db 100644
--- a/libobs-opengl/gl-nix.c
+++ b/libobs-opengl/gl-nix.c
@@ -16,8 +16,11 @@
 ******************************************************************************/
 
 #include "gl-nix.h"
+
+#ifdef ENABLE_X11
 #include "gl-x11-glx.h"
 #include "gl-x11-egl.h"
+#endif
 
 #ifdef ENABLE_WAYLAND
 #include "gl-wayland-egl.h"
@@ -30,12 +33,14 @@ static void init_winsys(void)
 	assert(gl_vtable == NULL);
 
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_GLX:
 		gl_vtable = gl_x11_glx_get_winsys_vtable();
 		break;
 	case OBS_NIX_PLATFORM_X11_EGL:
 		gl_vtable = gl_x11_egl_get_winsys_vtable();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		gl_vtable = gl_wayland_egl_get_winsys_vtable();
diff --git a/libobs-opengl/gl-subsystem.c b/libobs-opengl/gl-subsystem.c
index db2deac99..27522352c 100644
--- a/libobs-opengl/gl-subsystem.c
+++ b/libobs-opengl/gl-subsystem.c
@@ -1128,7 +1128,7 @@ void device_clear(gs_device_t *device, uint32_t clear_flags,
 	}
 
 	if (clear_flags & GS_CLEAR_DEPTH) {
-		glClearDepth(depth);
+		glClearDepthf(depth);
 		gl_flags |= GL_DEPTH_BUFFER_BIT;
 	}
 
diff --git a/libobs/CMakeLists.txt b/libobs/CMakeLists.txt
index a7f8d0411..c0263554b 100644
--- a/libobs/CMakeLists.txt
+++ b/libobs/CMakeLists.txt
@@ -17,17 +17,19 @@ endif()
 
 if(UNIX)
 	if (NOT APPLE)
-		find_package(X11 REQUIRED)
-		find_package(X11_XCB REQUIRED)
-		find_package(XCB OPTIONAL_COMPONENTS XINPUT)
-		find_package(XCB)
 		find_library(M_LIBRARY NAMES m)
 		find_library(DL_LIBRARY NAMES dl)
-		if (XCB_XINPUT_FOUND)
-			set(USE_XINPUT "1")
-		else()
-			set(USE_XINPUT "0")
-		endif()
+        if(ENABLE_X11)
+            find_package(X11 REQUIRED)
+            find_package(X11_XCB REQUIRED)
+            find_package(XCB OPTIONAL_COMPONENTS XINPUT)
+            find_package(XCB)
+            if (XCB_XINPUT_FOUND)
+                set(USE_XINPUT "1")
+            else()
+                set(USE_XINPUT "0")
+            endif()
+        endif()
 		find_package(PulseAudio)
 		if (NOT "${PULSEAUDIO_LIBRARY}" STREQUAL "")
 			message(STATUS "Found PulseAudio - Audio Monitor enabled")
@@ -188,7 +190,6 @@ elseif(UNIX)
 	set(libobs_PLATFORM_SOURCES
 		obs-nix.c
 		obs-nix-platform.c
-		obs-nix-x11.c
 		util/threading-posix.c
 		util/pipe-posix.c
 		util/platform-nix.c)
@@ -197,6 +198,37 @@ elseif(UNIX)
 		util/threading-posix.h
 		obs-nix-platform.h)
 
+    set(libobs_PLATFORM_DEPS
+        ${DL_LIBRARY}
+        ${M_LIBRARY})
+
+    if(ENABLE_X11)
+        set(libobs_PLATFORM_SOURCES
+            ${libobs_PLATFORM_SOURCES}
+            obs-nix-x11.c)
+
+        include_directories(
+            ${X11_X11_INCLUDE_PATH}
+            ${X11_XCB_INCLUDE_DIRS})
+        add_definitions(
+            ${X11_XCB_DEFINITIONS})
+        set(libobs_PLATFORM_DEPS
+            ${libobs_PLATFORM_DEPS}
+            ${X11_X11_LIB}
+            ${XCB_LIBRARIES}
+            ${X11_XCB_LIBRARIES})
+
+        if(USE_XINPUT)
+            include_directories(
+                ${XCB_XINPUT_INCLUDE_DIR})
+            add_definitions(
+                ${XCB_DEFINITIONS})
+            set(libobs_PLATFORM_DEPS
+                ${XCB_XINPUT_LIBRARY}
+                ${libobs_PLATFORM_DEPS})
+        endif()
+    endif()
+
 	if(ENABLE_WAYLAND)
 		find_package(Wayland COMPONENTS Client REQUIRED)
 
@@ -236,28 +268,6 @@ elseif(UNIX)
 			${GIO_LIBRARIES})
 	endif()
 
-	include_directories(
-		${X11_X11_INCLUDE_PATH}
-		${X11_XCB_INCLUDE_DIRS})
-	add_definitions(
-		${X11_XCB_DEFINITIONS})
-	set(libobs_PLATFORM_DEPS
-		${libobs_PLATFORM_DEPS}
-		${DL_LIBRARY}
-		${M_LIBRARY}
-		${X11_X11_LIB}
-		${XCB_LIBRARIES}
-		${X11_XCB_LIBRARIES})
-
-	if(USE_XINPUT)
-		include_directories(
-			${XCB_XINPUT_INCLUDE_DIR})
-		add_definitions(
-			${XCB_DEFINITIONS})
-		set(libobs_PLATFORM_DEPS
-			${XCB_XINPUT_LIBRARY}
-			${libobs_PLATFORM_DEPS})
-	endif()
 
 	if(HAVE_PULSEAUDIO)
 		set(libobs_PLATFORM_DEPS
diff --git a/libobs/obs-nix-platform.c b/libobs/obs-nix-platform.c
index e07a4d7b8..3a4cb677b 100644
--- a/libobs/obs-nix-platform.c
+++ b/libobs/obs-nix-platform.c
@@ -15,9 +15,17 @@
     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
 
+#include "obsconfig.h"
+
 #include "obs-nix-platform.h"
 
+#ifdef ENABLE_X11
 static enum obs_nix_platform_type obs_nix_platform = OBS_NIX_PLATFORM_X11_GLX;
+#endif
+
+#ifdef ENABLE_WAYLAND
+static enum obs_nix_platform_type obs_nix_platform = OBS_NIX_PLATFORM_WAYLAND;
+#endif
 
 static void *obs_nix_platform_display = NULL;
 
diff --git a/libobs/obs-nix-platform.h b/libobs/obs-nix-platform.h
index cef700d77..a0d241d11 100644
--- a/libobs/obs-nix-platform.h
+++ b/libobs/obs-nix-platform.h
@@ -24,8 +24,10 @@ extern "C" {
 #endif
 
 enum obs_nix_platform_type {
+#ifdef ENABLE_X11
 	OBS_NIX_PLATFORM_X11_GLX,
 	OBS_NIX_PLATFORM_X11_EGL,
+#endif
 #ifdef ENABLE_WAYLAND
 	OBS_NIX_PLATFORM_WAYLAND,
 #endif
diff --git a/libobs/obs-nix.c b/libobs/obs-nix.c
index 63b24fca0..69aa4b323 100644
--- a/libobs/obs-nix.c
+++ b/libobs/obs-nix.c
@@ -19,7 +19,10 @@
 #include "obs-internal.h"
 #include "obs-nix.h"
 #include "obs-nix-platform.h"
+
+#ifdef ENABLE_X11
 #include "obs-nix-x11.h"
+#endif
 
 #ifdef ENABLE_WAYLAND
 #include "obs-nix-wayland.h"
@@ -328,10 +331,12 @@ void log_system_info(void)
 	log_desktop_session_info();
 #endif
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_GLX:
 	case OBS_NIX_PLATFORM_X11_EGL:
 		obs_nix_x11_log_info();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		break;
@@ -342,10 +347,12 @@ void log_system_info(void)
 bool obs_hotkeys_platform_init(struct obs_core_hotkeys *hotkeys)
 {
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_GLX:
 	case OBS_NIX_PLATFORM_X11_EGL:
 		hotkeys_vtable = obs_nix_x11_get_hotkeys_vtable();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		hotkeys_vtable = obs_nix_wayland_get_hotkeys_vtable();
diff --git a/libobs/obsconfig.h.in b/libobs/obsconfig.h.in
index 5997b1b08..dd541fd47 100644
--- a/libobs/obsconfig.h.in
+++ b/libobs/obsconfig.h.in
@@ -23,6 +23,7 @@
 #define LIBOBS_IMAGEMAGICK_DIR_STYLE @LIBOBS_IMAGEMAGICK_DIR_STYLE@
 
 #cmakedefine ENABLE_WAYLAND
+#cmakedefine ENABLE_X11
 
 /* NOTE: Release candidate version numbers internally are always the previous
  * main release number!  For example, if the current public release is 21.0 and
diff --git a/plugins/linux-capture/CMakeLists.txt b/plugins/linux-capture/CMakeLists.txt
index baf57223d..5b80ce558 100644
--- a/plugins/linux-capture/CMakeLists.txt
+++ b/plugins/linux-capture/CMakeLists.txt
@@ -1,49 +1,61 @@
 project(linux-capture)
 
-find_package(X11 REQUIRED)
-if(NOT X11_Xcomposite_FOUND)
-	message(STATUS "Xcomposite library not found, linux-capture plugin disabled")
-	return()
-endif()
-
-find_package(XCB COMPONENTS XCB RANDR SHM XFIXES XINERAMA REQUIRED)
-find_package(X11_XCB REQUIRED)
-
 set(linux-capture_INCLUDES
 	"${CMAKE_SOURCE_DIR}/libobs"
-	${X11_Xcomposite_INCLUDE_PATH}
-	${X11_X11_INCLUDE_PATH}
-	${XCB_INCLUDE_DIRS}
 )
 
 set(linux-capture_SOURCES
 	linux-capture.c
-	xcursor.c
-	xcursor-xcb.c
-	xhelpers.c
-	xshm-input.c
-	xcomposite-main.cpp
-	xcompcap-main.cpp
-	xcompcap-helper.cpp
 )
 set(linux-capture_HEADERS
-	xcursor.h
-	xcursor-xcb.h
-	xhelpers.h
-	xcompcap-main.hpp
-	xcompcap-helper.hpp
 )
 
 set(linux-capture_LIBRARIES
 	libobs
 	glad
-	${X11_LIBRARIES}
-	${X11_Xfixes_LIB}
-	${X11_X11_LIB}
-	${X11_Xcomposite_LIB}
-	${XCB_LIBRARIES}
 )
 
+if(ENABLE_X11)
+    find_package(X11 REQUIRED)
+    find_package(XCB COMPONENTS XCB RANDR SHM XFIXES XINERAMA REQUIRED)
+    find_package(X11_XCB REQUIRED)
+
+    set(linux-capture_INCLUDES
+        ${linux-capture_INCLUDES}
+        ${X11_Xcomposite_INCLUDE_PATH}
+        ${X11_X11_INCLUDE_PATH}
+        ${XCB_INCLUDE_DIRS}
+    )
+
+    set(linux-capture_SOURCES
+        ${linux-capture_SOURCES}
+        xcursor.c
+        xcursor-xcb.c
+        xhelpers.c
+        xshm-input.c
+        xcomposite-main.cpp
+        xcompcap-main.cpp
+        xcompcap-helper.cpp
+    )
+    set(linux-capture_HEADERS
+        ${linux-capture_HEADERS}
+        xcursor.h
+        xcursor-xcb.h
+        xhelpers.h
+        xcompcap-main.hpp
+        xcompcap-helper.hpp
+    )
+
+    set(linux-capture_LIBRARIES
+        ${linux-capture_LIBRARIES}
+        ${X11_LIBRARIES}
+        ${X11_Xfixes_LIB}
+        ${X11_X11_LIB}
+        ${X11_Xcomposite_LIB}
+        ${XCB_LIBRARIES}
+    )
+endif()
+
 option(ENABLE_PIPEWIRE "Enable PipeWire support" ON)
 if(ENABLE_PIPEWIRE)
 	find_package(PipeWire QUIET)
diff --git a/plugins/linux-capture/linux-capture.c b/plugins/linux-capture/linux-capture.c
index c1d38e359..10fbf5752 100644
--- a/plugins/linux-capture/linux-capture.c
+++ b/plugins/linux-capture/linux-capture.c
@@ -25,12 +25,11 @@ OBS_DECLARE_MODULE()
 OBS_MODULE_USE_DEFAULT_LOCALE("linux-xshm", "en-US")
 MODULE_EXPORT const char *obs_module_description(void)
 {
-#ifdef ENABLE_PIPEWIRE
-	if (obs_get_nix_platform() != OBS_NIX_PLATFORM_X11_GLX)
-		return "PipeWire based window/screen capture for X11 and Wayland";
-	else
+#ifdef ENABLE_WAYLAND 
+    return "PipeWire based window/screen capture for Wayland";
+#elif ENABLE_X11
+    return "xcomposite/xshm based window/screen capture for X11";
 #endif
-		return "xcomposite/xshm based window/screen capture for X11";
 }
 
 extern struct obs_source_info xshm_input;
@@ -43,6 +42,7 @@ bool obs_module_load(void)
 	enum obs_nix_platform_type platform = obs_get_nix_platform();
 
 	switch (platform) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_GLX:
 		obs_register_source(&xshm_input);
 		xcomposite_load();
@@ -54,6 +54,7 @@ bool obs_module_load(void)
 		pipewire_capture_load();
 #endif
 		break;
+#endif
 
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
@@ -69,10 +70,16 @@ bool obs_module_load(void)
 
 void obs_module_unload(void)
 {
+#ifdef ENABLE_X11
 	if (obs_get_nix_platform() == OBS_NIX_PLATFORM_X11_GLX)
 		xcomposite_unload();
 #ifdef ENABLE_PIPEWIRE
 	else
 		pipewire_capture_unload();
 #endif
+#else
+#ifdef ENABLE_PIPEWIRE
+	pipewire_capture_unload();
+#endif
+#endif
 }
