From e24beaed12fb008bda77d1ff6abf3e9715128bd2 Mon Sep 17 00:00:00 2001
From: Tilmann Meyer <me@atiltedtree.dev>
Date: Fri, 4 Feb 2022 20:08:19 +0100
Subject: [PATCH 1/3] without x

---
 CMakeLists.txt                                |  1 +
 .../aja-output-ui/CMakeLists.txt              |  4 +--
 .../decklink-captions/CMakeLists.txt          |  4 ---
 .../decklink-output-ui/CMakeLists.txt         |  3 +-
 .../frontend-tools/CMakeLists.txt             | 11 +++++--
 .../auto-scene-switcher-wayland.cpp           | 17 +++++++++++
 ...er-nix.cpp => auto-scene-switcher-x11.cpp} |  0
 UI/obs-app.cpp                                |  2 ++
 UI/qt-wrappers.cpp                            |  2 ++
 deps/glad/CMakeLists.txt                      |  4 +--
 deps/glad/src/glad.c                          | 17 +----------
 libobs-opengl/CMakeLists.txt                  | 17 +++++++----
 libobs-opengl/gl-nix.c                        |  5 ++++
 libobs/CMakeLists.txt                         | 30 +++++++++++--------
 libobs/obs-nix-platform.c                     |  5 +---
 libobs/obs-nix-platform.h                     |  5 ++--
 libobs/obs-nix.c                              |  7 +++++
 libobs/obsconfig.h.in                         |  1 +
 plugins/linux-capture/CMakeLists.txt          |  5 ++++
 plugins/linux-pipewire/linux-pipewire.c       |  4 +++
 20 files changed, 88 insertions(+), 56 deletions(-)
 create mode 100644 UI/frontend-plugins/frontend-tools/auto-scene-switcher-wayland.cpp
 rename UI/frontend-plugins/frontend-tools/{auto-scene-switcher-nix.cpp => auto-scene-switcher-x11.cpp} (100%)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c8a54ed96..b91836582 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -62,6 +62,7 @@ elseif(OS_POSIX)
   option(ENABLE_PULSEAUDIO "Enable PulseAudio support" ON)
   if(OS_LINUX)
     option(ENABLE_WAYLAND "Enable building with support for Wayland (Linux)" ON)
+    option(ENABLE_X11 "Enable building with support for X11 (Linux)" OFF)
     option(BUILD_FOR_PPA "Build for PPA distribution" OFF)
   endif()
 endif()
diff --git a/UI/frontend-plugins/aja-output-ui/CMakeLists.txt b/UI/frontend-plugins/aja-output-ui/CMakeLists.txt
index c3c14c7b3..ebdc07961 100644
--- a/UI/frontend-plugins/aja-output-ui/CMakeLists.txt
+++ b/UI/frontend-plugins/aja-output-ui/CMakeLists.txt
@@ -75,9 +75,7 @@ elseif(OS_WINDOWS)
   target_link_libraries(aja-output-ui PRIVATE ws2_32.lib setupapi.lib Winmm.lib
                                               netapi32.lib Shlwapi.lib)
 else()
-  find_package(X11 REQUIRED)
-  target_link_libraries(aja-output-ui PRIVATE X11::X11
-                                              Qt${QT_VERSION}::GuiPrivate)
+  target_link_libraries(aja-output-ui PRIVATE Qt${QT_VERSION}::GuiPrivate)
 endif()
 
 set_target_properties(aja-output-ui PROPERTIES FOLDER "frontend" PREFIX "")
diff --git a/UI/frontend-plugins/decklink-captions/CMakeLists.txt b/UI/frontend-plugins/decklink-captions/CMakeLists.txt
index 9f8b5a0e4..565b073cc 100644
--- a/UI/frontend-plugins/decklink-captions/CMakeLists.txt
+++ b/UI/frontend-plugins/decklink-captions/CMakeLists.txt
@@ -32,10 +32,6 @@ if(OS_MACOS)
   mark_as_advanced(COCOA)
   target_link_libraries(decklink-captions PRIVATE ${COCOA})
 
-elseif(OS_POSIX)
-  find_package(X11 REQUIRED)
-  mark_as_advanced(X11)
-  target_link_libraries(decklink-captions PRIVATE X11::X11)
 elseif(OS_WINDOWS)
   set(MODULE_DESCRIPTION "OBS DeckLink Captions module")
   configure_file(${CMAKE_SOURCE_DIR}/cmake/bundle/windows/obs-module.rc.in
diff --git a/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt b/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt
index cfc929bb2..4050117d6 100644
--- a/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt
+++ b/UI/frontend-plugins/decklink-output-ui/CMakeLists.txt
@@ -62,8 +62,7 @@ elseif(OS_MACOS)
   target_link_libraries(decklink-output-ui PRIVATE ${COCOA})
 
 elseif(OS_POSIX)
-  find_package(X11 REQUIRED)
-  target_link_libraries(decklink-output-ui PRIVATE X11::X11
+  target_link_libraries(decklink-output-ui PRIVATE
                                                    Qt${QT_VERSION}::GuiPrivate)
 endif()
 
diff --git a/UI/frontend-plugins/frontend-tools/CMakeLists.txt b/UI/frontend-plugins/frontend-tools/CMakeLists.txt
index e7d78558d..a8c4aa027 100644
--- a/UI/frontend-plugins/frontend-tools/CMakeLists.txt
+++ b/UI/frontend-plugins/frontend-tools/CMakeLists.txt
@@ -98,11 +98,16 @@ elseif(OS_MACOS)
                               PROPERTIES COMPILE_FLAGS -fobjc-arc)
 
 elseif(OS_POSIX)
-  find_package(X11 REQUIRED)
+  if(ENABLE_X11)
+    find_package(X11 REQUIRED)
 
-  target_link_libraries(frontend-tools PRIVATE X11::X11)
+    target_link_libraries(frontend-tools PRIVATE X11::X11)
 
-  target_sources(frontend-tools PRIVATE auto-scene-switcher-nix.cpp)
+    target_sources(frontend-tools PRIVATE auto-scene-switcher-x11.cpp)
+  endif()
+  if(ENABLE_WAYLAND)
+    target_sources(frontend-tools PRIVATE auto-scene-switcher-wayland.cpp)
+  endif()
 endif()
 
 get_target_property(_SOURCES frontend-tools SOURCES)
diff --git a/UI/frontend-plugins/frontend-tools/auto-scene-switcher-wayland.cpp b/UI/frontend-plugins/frontend-tools/auto-scene-switcher-wayland.cpp
new file mode 100644
index 000000000..ec35e5524
--- /dev/null
+++ b/UI/frontend-plugins/frontend-tools/auto-scene-switcher-wayland.cpp
@@ -0,0 +1,17 @@
+#include <util/platform.h>
+#include "auto-scene-switcher.hpp"
+
+using namespace std;
+
+void CleanupSceneSwitcher()
+{
+}
+
+
+void GetWindowList(vector<string> &windows)
+{
+}
+
+void GetCurrentWindowTitle(string &title)
+{
+}
diff --git a/UI/frontend-plugins/frontend-tools/auto-scene-switcher-nix.cpp b/UI/frontend-plugins/frontend-tools/auto-scene-switcher-x11.cpp
similarity index 100%
rename from UI/frontend-plugins/frontend-tools/auto-scene-switcher-nix.cpp
rename to UI/frontend-plugins/frontend-tools/auto-scene-switcher-x11.cpp
diff --git a/UI/obs-app.cpp b/UI/obs-app.cpp
index a3bc5dfb6..b72bdc248 100644
--- a/UI/obs-app.cpp
+++ b/UI/obs-app.cpp
@@ -1419,10 +1419,12 @@ bool OBSApp::OBSInit()
 	qRegisterMetaType<VoidFunc>();
 
 #if !defined(_WIN32) && !defined(__APPLE__)
+#ifdef ENABLE_X11
 	if (QApplication::platformName() == "xcb") {
 		obs_set_nix_platform(OBS_NIX_PLATFORM_X11_EGL);
 		blog(LOG_INFO, "Using EGL/X11");
 	}
+#endif
 
 #ifdef ENABLE_WAYLAND
 	if (QApplication::platformName().contains("wayland")) {
diff --git a/UI/qt-wrappers.cpp b/UI/qt-wrappers.cpp
index f2f93ed3b..53faf9a7e 100644
--- a/UI/qt-wrappers.cpp
+++ b/UI/qt-wrappers.cpp
@@ -122,10 +122,12 @@ bool QTToGSWindow(QWindow *window, gs_window &gswindow)
 	gswindow.view = (id)window->winId();
 #else
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_EGL:
 		gswindow.id = window->winId();
 		gswindow.display = obs_get_nix_platform_display();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		QPlatformNativeInterface *native =
diff --git a/deps/glad/CMakeLists.txt b/deps/glad/CMakeLists.txt
index 0e49e1d8d..d4b60eab7 100644
--- a/deps/glad/CMakeLists.txt
+++ b/deps/glad/CMakeLists.txt
@@ -1,6 +1,6 @@
 project(glad)
 
-find_package(OpenGL REQUIRED)
+find_package(OpenGL REQUIRED COMPONENTS EGL OpenGL)
 
 add_library(glad SHARED)
 add_library(OBS::obsglad ALIAS glad)
@@ -11,8 +11,6 @@ target_include_directories(glad PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
 
 target_compile_definitions(glad PRIVATE GLAD_GLAPI_EXPORT_BUILD)
 
-target_link_libraries(glad PUBLIC OpenGL::GL)
-
 set_target_properties(
   glad
   PROPERTIES OUTPUT_NAME obsglad
diff --git a/deps/glad/src/glad.c b/deps/glad/src/glad.c
index 8fc9f8f53..528ca60a6 100644
--- a/deps/glad/src/glad.c
+++ b/deps/glad/src/glad.c
@@ -33,10 +33,6 @@ void close_gl(void) {
 #include <dlfcn.h>
 static void* libGL;
 
-#ifndef __APPLE__
-typedef void* (APIENTRYP PFNGLXGETPROCADDRESSPROC_PRIVATE)(const char*);
-PFNGLXGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;
-#endif
 
 static
 int open_gl(void) {
@@ -48,7 +44,7 @@ int open_gl(void) {
         "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"
     };
 #else
-    static const char *NAMES[] = {"libGL.so.1", "libGL.so"};
+    static const char *NAMES[] = {"libOpenGL.so.0", "libOpenGL.so"};
 #endif
 
     unsigned int index = 0;
@@ -56,13 +52,7 @@ int open_gl(void) {
         libGL = dlopen(NAMES[index], RTLD_NOW | RTLD_GLOBAL);
 
         if(libGL != NULL) {
-#ifdef __APPLE__
             return 1;
-#else
-            gladGetProcAddressPtr = (PFNGLXGETPROCADDRESSPROC_PRIVATE)dlsym(libGL,
-                "glXGetProcAddressARB");
-            return gladGetProcAddressPtr != NULL;
-#endif
         }
     }
 
@@ -83,11 +73,6 @@ void* get_proc(const char *namez) {
     void* result = NULL;
     if(libGL == NULL) return NULL;
 
-#ifndef __APPLE__
-    if(gladGetProcAddressPtr != NULL) {
-        result = gladGetProcAddressPtr(namez);
-    }
-#endif
     if(result == NULL) {
 #ifdef _WIN32
         result = (void*)GetProcAddress(libGL, namez);
diff --git a/libobs-opengl/CMakeLists.txt b/libobs-opengl/CMakeLists.txt
index 78642d8bf..cb3101fb0 100644
--- a/libobs-opengl/CMakeLists.txt
+++ b/libobs-opengl/CMakeLists.txt
@@ -46,15 +46,20 @@ elseif(OS_MACOS)
   set_target_properties(libobs-opengl PROPERTIES PREFIX "")
 
 elseif(OS_POSIX)
-  find_package(X11 REQUIRED)
-  find_package(XCB COMPONENTS XCB)
-  find_package(X11_XCB REQUIRED)
+  target_sources(libobs-opengl PRIVATE gl-egl-common.c gl-nix.c)
 
-  target_sources(libobs-opengl PRIVATE gl-egl-common.c gl-nix.c gl-x11-egl.c)
+  set_target_properties(libobs-opengl PROPERTIES PREFIX "")
 
-  target_link_libraries(libobs-opengl PRIVATE XCB::XCB X11::X11_xcb)
+  if(ENABLE_X11)
+    find_package(X11 REQUIRED)
+    find_package(XCB COMPONENTS XCB)
+    find_package(X11_XCB REQUIRED)
+
+    target_sources(libobs-opengl PRIVATE gl-x11-egl.c)
+
+    target_link_libraries(libobs-opengl PRIVATE XCB::XCB X11::X11_xcb)
+  endif()
 
-  set_target_properties(libobs-opengl PROPERTIES PREFIX "")
 
   if(ENABLE_WAYLAND)
     find_package(
diff --git a/libobs-opengl/gl-nix.c b/libobs-opengl/gl-nix.c
index 846524932..58a99cc6f 100644
--- a/libobs-opengl/gl-nix.c
+++ b/libobs-opengl/gl-nix.c
@@ -16,7 +16,10 @@
 ******************************************************************************/
 
 #include "gl-nix.h"
+
+#ifdef ENABLE_X11
 #include "gl-x11-egl.h"
+#endif
 
 #ifdef ENABLE_WAYLAND
 #include "gl-wayland-egl.h"
@@ -29,9 +32,11 @@ static void init_winsys(void)
 	assert(gl_vtable == NULL);
 
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_EGL:
 		gl_vtable = gl_x11_egl_get_winsys_vtable();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		gl_vtable = gl_wayland_egl_get_winsys_vtable();
diff --git a/libobs/CMakeLists.txt b/libobs/CMakeLists.txt
index a8ed8b23a..376447252 100644
--- a/libobs/CMakeLists.txt
+++ b/libobs/CMakeLists.txt
@@ -361,27 +361,16 @@ elseif(OS_POSIX)
     target_compile_definitions(libobs PRIVATE ENABLE_DARRAY_TYPE_TEST)
   endif()
 
-  find_package(X11 REQUIRED)
-  find_package(
-    XCB
-    COMPONENTS XCB
-    OPTIONAL_COMPONENTS XINPUT
-    QUIET)
-  find_package(X11_XCB REQUIRED)
-
   target_sources(
     libobs
     PRIVATE obs-nix.c
             obs-nix-platform.c
             obs-nix-platform.h
-            obs-nix-x11.c
             util/threading-posix.c
             util/threading-posix.h
             util/pipe-posix.c
             util/platform-nix.c)
 
-  target_link_libraries(libobs PRIVATE X11::X11_xcb XCB::XCB)
-
   if(USE_XDG)
     target_compile_definitions(libobs PRIVATE USE_XDG)
   endif()
@@ -411,8 +400,23 @@ elseif(OS_POSIX)
                                   util/platform-nix-portal.c)
   endif()
 
-  if(TARGET XCB::XINPUT)
-    target_link_libraries(libobs PRIVATE XCB::XINPUT)
+
+  if(ENABLE_X11)
+    find_package(X11 REQUIRED)
+    find_package(
+      XCB
+      COMPONENTS XCB
+      OPTIONAL_COMPONENTS XINPUT
+      QUIET)
+    find_package(X11_XCB REQUIRED)
+
+    target_link_libraries(libobs PRIVATE X11::X11_xcb XCB::XCB)
+
+    if(TARGET XCB::XINPUT)
+      target_link_libraries(libobs PRIVATE XCB::XINPUT)
+    endif()
+
+    target_sources(libobs PRIVATE obs-nix-x11.c)
   endif()
 
   if(ENABLE_WAYLAND)
diff --git a/libobs/obs-nix-platform.c b/libobs/obs-nix-platform.c
index 52a8d841f..b67e57946 100644
--- a/libobs/obs-nix-platform.c
+++ b/libobs/obs-nix-platform.c
@@ -17,15 +17,12 @@
 
 #include "obs-nix-platform.h"
 
-#include <assert.h>
-
-static enum obs_nix_platform_type obs_nix_platform = OBS_NIX_PLATFORM_X11_EGL;
+static enum obs_nix_platform_type obs_nix_platform;
 
 static void *obs_nix_platform_display = NULL;
 
 void obs_set_nix_platform(enum obs_nix_platform_type platform)
 {
-	assert(platform != OBS_NIX_PLATFORM_X11_GLX);
 	obs_nix_platform = platform;
 }
 
diff --git a/libobs/obs-nix-platform.h b/libobs/obs-nix-platform.h
index 0c6375117..455af03f3 100644
--- a/libobs/obs-nix-platform.h
+++ b/libobs/obs-nix-platform.h
@@ -18,18 +18,19 @@
 #pragma once
 
 #include "util/c99defs.h"
+#include "obs-config.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 enum obs_nix_platform_type {
-	OBS_NIX_PLATFORM_X11_GLX OBS_DEPRECATED,
+#ifdef ENABLE_X11
 	OBS_NIX_PLATFORM_X11_EGL,
+#endif
 #ifdef ENABLE_WAYLAND
 	OBS_NIX_PLATFORM_WAYLAND,
 #endif
-
 };
 
 /**
diff --git a/libobs/obs-nix.c b/libobs/obs-nix.c
index 71a215d47..2aa8aead0 100644
--- a/libobs/obs-nix.c
+++ b/libobs/obs-nix.c
@@ -19,7 +19,10 @@
 #include "obs-internal.h"
 #include "obs-nix.h"
 #include "obs-nix-platform.h"
+
+#ifdef ENABLE_X11
 #include "obs-nix-x11.h"
+#endif
 
 #ifdef ENABLE_WAYLAND
 #include "obs-nix-wayland.h"
@@ -327,9 +330,11 @@ void log_system_info(void)
 	log_desktop_session_info();
 #endif
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_EGL:
 		obs_nix_x11_log_info();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		break;
@@ -340,9 +345,11 @@ void log_system_info(void)
 bool obs_hotkeys_platform_init(struct obs_core_hotkeys *hotkeys)
 {
 	switch (obs_get_nix_platform()) {
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_EGL:
 		hotkeys_vtable = obs_nix_x11_get_hotkeys_vtable();
 		break;
+#endif
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
 		hotkeys_vtable = obs_nix_wayland_get_hotkeys_vtable();
diff --git a/libobs/obsconfig.h.in b/libobs/obsconfig.h.in
index 0ebd0eb0c..efb4abf2f 100644
--- a/libobs/obsconfig.h.in
+++ b/libobs/obsconfig.h.in
@@ -20,6 +20,7 @@
 #cmakedefine PULSEAUDIO_FOUND
 #cmakedefine XCB_XINPUT_FOUND
 #cmakedefine ENABLE_WAYLAND
+#cmakedefine ENABLE_X11
 
 /* NOTE: Release candidate version numbers internally are always the previous
  * main release number!  For example, if the current public release is 21.0 and
diff --git a/plugins/linux-capture/CMakeLists.txt b/plugins/linux-capture/CMakeLists.txt
index feb8077e8..6091db7c4 100644
--- a/plugins/linux-capture/CMakeLists.txt
+++ b/plugins/linux-capture/CMakeLists.txt
@@ -1,5 +1,10 @@
 project(linux-capture)
 
+if(NOT ENABLE_X11)
+  message(STATUS "OBS:  DISABLED   linux-capture")
+  return()
+endif()
+
 find_package(X11 REQUIRED)
 find_package(XCB COMPONENTS XCB XFIXES RANDR SHM XINERAMA COMPOSITE)
 if(NOT TARGET XCB::COMPOSITE)
diff --git a/plugins/linux-pipewire/linux-pipewire.c b/plugins/linux-pipewire/linux-pipewire.c
index 961fafaef..a80694493 100644
--- a/plugins/linux-pipewire/linux-pipewire.c
+++ b/plugins/linux-pipewire/linux-pipewire.c
@@ -40,10 +40,14 @@ bool obs_module_load(void)
 	switch (obs_get_nix_platform()) {
 #ifdef ENABLE_WAYLAND
 	case OBS_NIX_PLATFORM_WAYLAND:
+		pipewire_capture_load();
+		break;
 #endif
+#ifdef ENABLE_X11
 	case OBS_NIX_PLATFORM_X11_EGL:
 		pipewire_capture_load();
 		break;
+#endif
 	}
 
 	return true;
-- 
2.35.1

