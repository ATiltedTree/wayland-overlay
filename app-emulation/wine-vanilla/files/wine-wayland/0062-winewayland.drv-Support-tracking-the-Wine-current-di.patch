From e2a1408387c9906eab3335c051ae43ac801c13c0 Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Mon, 13 Sep 2021 17:14:48 +0300
Subject: [PATCH 062/147] winewayland.drv: Support tracking the Wine current
 display mode.

Track the Wine current display mode independently from the Wayland
current display mode, so these two are can be made to differ in upcoming
commits.

Signed-off-by: Alexandros Frantzis <alexandros.frantzis@collabora.com>
---
 dlls/winewayland.drv/display.c        | 32 ++++++++++++++++++++-------
 dlls/winewayland.drv/wayland_output.c |  6 +++++
 dlls/winewayland.drv/waylanddrv.h     |  1 +
 3 files changed, 31 insertions(+), 8 deletions(-)

diff --git a/dlls/winewayland.drv/display.c b/dlls/winewayland.drv/display.c
index 1aa6dc3333e..a4d609330e0 100644
--- a/dlls/winewayland.drv/display.c
+++ b/dlls/winewayland.drv/display.c
@@ -60,9 +60,9 @@ static void wayland_broadcast_wm_display_change(void)
         wl_list_for_each(output, &wayland->output_list, link)
         {
             int width, height;
-            if (!output->current_mode) continue;
-            width = output->current_mode->width;
-            height = output->current_mode->height;
+            if (!output->current_wine_mode) continue;
+            width = output->current_wine_mode->width;
+            height = output->current_wine_mode->height;
             wayland_process_release();
 
             SendMessageW(GetDesktopWindow(), WM_WAYLAND_BROADCAST_DISPLAY_CHANGE,
@@ -123,8 +123,8 @@ static void wayland_add_monitor(const struct gdi_device_manager *device_manager,
     }
 
     SetRect(&monitor.rc_monitor, output->x, output->y,
-            output->x + output->current_mode->width,
-            output->y + output->current_mode->height);
+            output->x + output->current_wine_mode->width,
+            output->y + output->current_wine_mode->height);
 
     /* We don't have a direct way to get the work area in Wayland. */
     monitor.rc_work = monitor.rc_monitor;
@@ -160,7 +160,7 @@ void CDECL WAYLAND_UpdateDisplayDevices(const struct gdi_device_manager *device_
 
     wl_list_for_each(output, &wayland->output_list, link)
     {
-        if (!output->current_mode) continue;
+        if (!output->current_wine_mode) continue;
 
         /* TODO: Detect and support multiple monitors per adapter (i.e., mirroring). */
         wayland_add_adapter(device_manager, param, output_id);
@@ -303,7 +303,7 @@ static void populate_devmode(struct wayland_output_mode *output_mode, DEVMODEW *
     mode->dmDisplayFrequency = output_mode->refresh / 1000;
 }
 
-static BOOL wayland_get_current_devmode(struct wayland *wayland, LPCWSTR name, DEVMODEW *mode)
+static BOOL wayland_get_native_devmode(struct wayland *wayland, LPCWSTR name, DEVMODEW *mode)
 {
     struct wayland_output *output;
 
@@ -319,6 +319,22 @@ static BOOL wayland_get_current_devmode(struct wayland *wayland, LPCWSTR name, D
     return TRUE;
 }
 
+static BOOL wayland_get_current_devmode(struct wayland *wayland, LPCWSTR name, DEVMODEW *mode)
+{
+    struct wayland_output *output;
+
+    output = wayland_output_get_by_wine_name(wayland, name);
+    if (!output)
+        return FALSE;
+
+    if (!output->current_wine_mode)
+        return FALSE;
+
+    populate_devmode(output->current_wine_mode, mode);
+
+    return TRUE;
+}
+
 static BOOL wayland_get_devmode(struct wayland *wayland, LPCWSTR name, DWORD n, DEVMODEW *mode)
 {
     struct wayland_output *output;
@@ -357,7 +373,7 @@ BOOL CDECL WAYLAND_EnumDisplaySettingsEx(LPCWSTR name, DWORD n, LPDEVMODEW devmo
     if (n == ENUM_REGISTRY_SETTINGS)
     {
         if (!read_registry_settings(name, devmode) &&
-            !wayland_get_current_devmode(wayland, name, devmode))
+            !wayland_get_native_devmode(wayland, name, devmode))
         {
             ERR("Failed to get %s registry display settings and native mode.\n",
                 wine_dbgstr_w(name));
diff --git a/dlls/winewayland.drv/wayland_output.c b/dlls/winewayland.drv/wayland_output.c
index b50230fb5e9..74d9fb80535 100644
--- a/dlls/winewayland.drv/wayland_output.c
+++ b/dlls/winewayland.drv/wayland_output.c
@@ -122,7 +122,10 @@ static void wayland_output_add_mode(struct wayland_output *output,
             /* Upgrade modes from virtual to native, never the reverse. */
             if (native) mode->native = TRUE;
             if (current)
+            {
                 output->current_mode = mode;
+                output->current_wine_mode = mode;
+            }
             return;
         }
         else if (cmp == 1) /* mode > new */
@@ -141,7 +144,10 @@ static void wayland_output_add_mode(struct wayland_output *output,
     mode->native = native;
 
     if (current)
+    {
         output->current_mode = mode;
+        output->current_wine_mode = mode;
+    }
 
     wl_list_insert(insert_after_link, &mode->link);
 }
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 21183bbdcb9..96383f04e42 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -155,6 +155,7 @@ struct wayland_output
     struct zxdg_output_v1 *zxdg_output_v1;
     struct wl_list mode_list;
     struct wayland_output_mode *current_mode;
+    struct wayland_output_mode *current_wine_mode;
     int logical_x, logical_y;  /* logical position */
     int logical_w, logical_h;  /* logical size */
     int x, y;  /* position in native pixel coordinate space */
-- 
2.34.1

