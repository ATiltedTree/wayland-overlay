From 8d3dfd10fe5b9acf127a51a13664b16ab9a39c8b Mon Sep 17 00:00:00 2001
From: Alexandros Frantzis <alexandros.frantzis@collabora.com>
Date: Thu, 2 Sep 2021 17:11:53 +0300
Subject: [PATCH 018/147] winewayland.drv: Support dispatching Wayland buffer
 events independently.

Introduce a mechanism to dispatch Wayland buffer events, using a
separate per-thread Wayland event queue. We need this since buffer
events (e.g., buffer releases) may need to be manually dispatched in
contexts where it's unsafe to dispatch other events (e.g., in threads
other than the Wayland owner thread).

Signed-off-by: Alexandros Frantzis <alexandros.frantzis@collabora.com>
---
 dlls/winewayland.drv/wayland.c    | 29 +++++++++++++++++++++++++++++
 dlls/winewayland.drv/waylanddrv.h |  7 +++++++
 2 files changed, 36 insertions(+)

diff --git a/dlls/winewayland.drv/wayland.c b/dlls/winewayland.drv/wayland.c
index 64c041d6c1c..32c69734bbe 100644
--- a/dlls/winewayland.drv/wayland.c
+++ b/dlls/winewayland.drv/wayland.c
@@ -131,6 +131,12 @@ BOOL wayland_init(struct wayland *wayland)
         return FALSE;
     }
 
+    if (!(wayland->buffer_wl_event_queue = wl_display_create_queue(wayland->wl_display)))
+    {
+        ERR("Failed to create buffer event queue\n");
+        return FALSE;
+    }
+
     if (!(wayland->wl_registry = wl_display_get_registry(wayland->wl_display)))
     {
         ERR("Failed to get to wayland registry\n");
@@ -181,6 +187,12 @@ void wayland_deinit(struct wayland *wayland)
     if (wayland->wl_event_queue)
         wl_event_queue_destroy(wayland->wl_event_queue);
 
+    if (wayland->buffer_wl_event_queue)
+    {
+        wl_event_queue_destroy(wayland->buffer_wl_event_queue);
+        wayland->buffer_wl_event_queue = NULL;
+    }
+
     wl_display_flush(wayland->wl_display);
 
     memset(wayland, 0, sizeof(*wayland));
@@ -235,3 +247,20 @@ void wayland_process_release(void)
 {
     LeaveCriticalSection(&process_wayland_section);
 }
+
+/**********************************************************************
+ *          wayland_dispatch_buffer
+ *
+ * Dispatch buffer related events for the specified wayland instance.
+ *
+ * Returns the number of events dispatched.
+ */
+int wayland_dispatch_buffer(struct wayland *wayland)
+{
+    TRACE("wayland=%p buffer_queue=%p\n", wayland, wayland->buffer_wl_event_queue);
+
+    wl_display_flush(wayland->wl_display);
+
+    return wl_display_dispatch_queue_pending(wayland->wl_display,
+                                             wayland->buffer_wl_event_queue);
+}
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index c1809cbd532..3d168c8cf66 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -57,6 +57,7 @@ struct wayland
     DWORD thread_id;
     struct wl_display *wl_display;
     struct wl_event_queue *wl_event_queue;
+    struct wl_event_queue *buffer_wl_event_queue;
     struct wl_registry *wl_registry;
     struct wl_compositor *wl_compositor;
     struct zxdg_output_manager_v1 *zxdg_output_manager_v1;
@@ -134,6 +135,12 @@ void wayland_update_outputs_from_process(struct wayland *wayland);
 struct wayland_output *wayland_output_get_by_wine_name(struct wayland *wayland,
                                                        LPCWSTR wine_name);
 
+/**********************************************************************
+ *          Wayland event dispatch
+ */
+
+int wayland_dispatch_buffer(struct wayland *wayland);
+
 /**********************************************************************
  *          USER driver functions
  */
-- 
2.34.1

